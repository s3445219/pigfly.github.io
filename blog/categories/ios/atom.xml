<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ios | Pigfly's learning notes]]></title>
  <link href="http://pigfly.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://pigfly.github.io/"/>
  <updated>2015-05-29T00:43:13+10:00</updated>
  <id>http://pigfly.github.io/</id>
  <author>
    <name><![CDATA[Alex]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[road to iOS 0.x]]></title>
    <link href="http://pigfly.github.io/blog/2014/11/road-to-ios-0-dot-x/"/>
    <updated>2014-11-11T03:14:19+11:00</updated>
    <id>http://pigfly.github.io/blog/2014/11/road-to-ios-0-dot-x</id>
    <content type="html"><![CDATA[<h2>ImageIO - could not find ColorSync function [Solved]</h2>

<p>Recently I found an undocumented bug in iOS 8 when I tried to generate pdf under UIkit framework. The bug blocks me from generating pdf in a preferred way using UIPrint, so I had to use a more primitve method to generate the pdf in iOS8.</p>

<p>For better understanding this issue, first I will introduce ways of generating PDF in iOS, and why it may become a problem in iOS8 or above.</p>

<!--more-->


<h2>Low level way</h2>

<ul>
<li>The first way of generating PDF is using UiKit and core graphics. It provides a set of functions for generating PDF content using native drawing code. However, there are some classes like <em>UIBezierPath</em> provide more high level API for drawing. Truth is, those drawing classes wrap Core Graphics code into their methods to ease drawing for the programmer.</li>
<li>Notice, the core graphics is a 2D drawing C API, it deals with lower level of drawing compared to the latter one. And you need to provide frame,  margins, translate matrix parameters,  number of pages etc in order to generate a user-friendly pdf.</li>
<li>For a more detailed examples of generating PDF, visit apple doc at <a href="https://developer.apple.com/library/ios/documentation/2DDrawing/Conceptual/DrawingPrintingiOS/GeneratingPDF/GeneratingPDF.html">generating PDF content</a></li>
</ul>


<h2>High level way</h2>

<ul>
<li>The task I involved is to generate PDF from html string. So I decide to use <em>UIWebView</em>&rsquo;s viewPrintFormatter and other UIPrint* classes to achieve the goal.</li>
<li>However, there is a key method in the UIPrintPageRenderer class causes drawing thread hang up, and never gets returned, here is the code and error message:</li>
</ul>


<pre><code class="objective-c drawPageAtIndex">// the sixth line causes the problem
for ( int i = 0 ; i &lt; self.numberOfPages ; i++ )
    {
        UIGraphicsBeginPDFPage();

        [self drawPageAtIndex: i inRect: bounds];
    }

// the console output
// *** ImageIO - could not find ColorSync function 'ColorSyncProfileCreateSanitizedCopy'
</code></pre>

<ul>
<li>When you start to trace the source of the method call, you will find it&rsquo;s something worked behind the scence, you can&rsquo;t even see the source code. So what I end up with doing is using a core graphics approach, avoiding using <em>drawPageAtIndex:</em> call, and figure out a way how to draw multiple pdf pages in pdf.</li>
</ul>


<pre><code class="objective-c drawPageAtIndex">for (int i = 0 ;i &lt; pages ;i++)
    {
        if (maxHeight * (i + 1) &gt; height)
        {
            // Check to see if page draws more than the height of the UIWebView
            CGRect scrollViewFrame = [scrollView frame];
            scrollViewFrame.size.height -= (((i + 1) * maxHeight) - height);
            [scrollView setFrame:scrollViewFrame];
        }
        // Specify the size of the pdf page
        UIGraphicsBeginPDFPageWithInfo(CGRectMake(0, 0, kPaperWidthA4, kPaperHeightA4), nil);
        CGContextRef currentContext = UIGraphicsGetCurrentContext();

        CGContextTranslateCTM(currentContext, kMargin, -(maxHeight * i) + kMargin);

        [scrollView setContentOffset:CGPointMake(0, maxHeight * i) animated:NO];

        [scrollView.layer renderInContext:currentContext];
    }
</code></pre>

<h2><br></h2>

<h3>Reference</h3>

<ol>
<li>Stanford iOS 7 development</li>
<li><a href="https://developer.apple.com/library/mac/navigation/">Mac Developer Library</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[road to iOS 0.6.1]]></title>
    <link href="http://pigfly.github.io/blog/2014/10/road-to-ios-0-dot-6-dot-1/"/>
    <updated>2014-10-14T10:14:19+11:00</updated>
    <id>http://pigfly.github.io/blog/2014/10/road-to-ios-0-dot-6-dot-1</id>
    <content type="html"><![CDATA[<h1>All about Nib file</h1>

<h2>Anatomy of Nib file</h2>

<ul>
<li><strong>User interface</strong> objects(Visual elements)</li>
<li><strong>File Owner</strong>, placeholder, a <strong>controller</strong> object that is responsible for contents of nib file.

<ul>
<li>Usually you will want to connect a controller to the nib file, so that controller&rsquo;s <strong>view</strong> can be connected with nib&rsquo;s top-level object</li>
<li>However, if you want to break a view into different nib components,  then assemble them together in one controller, you can leave this <strong>File Owner</strong> blank, and load all nibs in your controller.</li>
</ul>
</li>
<li><strong>First Responder</strong>, placeholder, the first object in your app&rsquo;s responder chain.

<ul>
<li>The UIKit framework automatically set first responder for you</li>
</ul>
</li>
</ul>


<!--more-->


<h2>Nib Object Life Cycle</h2>

<p>The nib-loading code instantiates the objects, configures them, and reestablishes any inter-object connections that you created in your nib file.
When you use methods of <strong>NSBundle</strong> to load and instantiate the objects in nib file, the nib-loading code does following:</p>

<ol>
<li><p>Load the archived nib file into memory</p></li>
<li><p>Unarchive the nib file, instantiates the objects</p>

<ul>
<li>In iOS, any object that conforms to the NSCoding protocol is initialized using the <strong>initWithCoder:</strong>. This includes all subclasses of UIView and UIViewController whether they are part of the default Xcode library or custom classes you define.</li>
<li>The reason using <strong>initWithCoder</strong> is that they are available in Xcode library (System knows how to instantiate)</li>
<li>Custom objects other than those described in the preceding steps receive an <strong>init</strong> message. (Which may lead to init chain)</li>
</ul>
</li>
<li><p>It <strong>reestablishes all connections</strong> (actions, outlets, and bindings) between objects in the nib file.</p>

<ul>
<li><strong>Outlet connections</strong>

<ul>
<li>The nib-loading code uses the <strong>setValue:forKey:</strong> to reconnect each outlet</li>
<li>Setting an outlet also generates a <strong>key-value observing (KVO)</strong> notification for any registered observers.

<ul>
<li>That&rsquo;s why if sometimes you forget to connect oulet in your code to nib file, it will prompt key-value pair not matched !</li>
</ul>
</li>
</ul>
</li>
<li><strong>Action connections</strong>

<ul>
<li>In iOS, the nib-loading code uses the <strong>addTarget:action:forControlEvents:</strong> method of the UIControl object to configure the action. If the target is nil, the action is handled by the responder chain.</li>
</ul>
</li>
</ul>
</li>
<li><p>It sends an <strong>awakeFromNib</strong> message to the appropriate objects in the nib file</p>

<ul>
<li>In iOS, this message is sent only to the interface objects that were instantiated by the nib-loading code. It is not sent to Fileâ€™s Owner, First Responder, or any other placeholder objects.</li>
<li>That means, you can also put view init code in <strong>awakeFromNib</strong> in your custom view, since interface objects are already instantiated.</li>
</ul>
</li>
</ol>


<pre><code class="objective-c configure view in awakeFromNib in YourView.m">- (void)awakeFromNib
{
    if (self)
    {
        // do view init
        self.button.layer setBorderWidth:2.0f];
        ...
    }
}
</code></pre>

<p><br></p>

<p>Be mindful that if you need to configure the objects in your nib file further at load time, the most appropriate time to do so is <strong>after your nib-loading call returns</strong>. At that point, all of the objects are created, initialized, and ready for use.</p>

<pre><code class="objective-c configure objects in nib files after nib is loaded in controller">- (void)loadView
{
    // load nib file
    NSArray *nibs = [[NSBundle mainBundle] loadNibNamed:@"yourNib"
                                   owner:self
                                 options:nil];
    YourOwnView *first = [nibs firstObject];

    // configure the view
    ...

    self.view = first;
}   
</code></pre>

<h2><br></h2>

<h3>Load custom view (nib file + UIView file)</h3>

<ul>
<li>Steps for loading custom view

<ul>
<li>create a view using interface builder(i.e. create xib file)</li>
<li>create your view controller for this xib (if don&rsquo;t leave File Owner empty)</li>
<li>create subclass of <strong>UIView</strong>, e.g. YourOwnView</li>
<li><strong>change the custom class view attribute for xib to YourOwnView</strong></li>
<li>implement <strong>awakeFromNib</strong> to custom initialise your elements in nib</li>
<li><strong>call loadNibNamed: at appropriate time in your controller to let nib-loading cycle go through</strong></li>
</ul>
</li>
</ul>


<p>A common mistake is to call <strong>initWithFrame</strong> in controller, which only affects those view created pure programmatically. It has nothing to do with Your nib file. You need to call <strong>loadNibNamed</strong> in controller at least once to give your nib file a chance to finish nib-loading life cycle !</p>

<h2>Nib Anatomy Mindnode</h2>

<p><img src="/images/ios/nib_anatomy.png" width="805" height="585" title="Nib Anatomy" ></p>

<h2><br></h2>

<h3>Reference</h3>

<ol>
<li>Stanford iOS 7 development</li>
<li><a href="https://developer.apple.com/library/mac/navigation/">Mac Developer Library</a></li>
<li><a href="https://developer.apple.com/library/ios/documentation/cocoa/conceptual/loadingresources/cocoanibs/cocoanibs.html">Manage Resources in OSX</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[road to iOS 0.7]]></title>
    <link href="http://pigfly.github.io/blog/2014/10/road-to-ios-0-dot-7/"/>
    <updated>2014-10-12T13:14:19+11:00</updated>
    <id>http://pigfly.github.io/blog/2014/10/road-to-ios-0-dot-7</id>
    <content type="html"><![CDATA[<h1>View Controllers</h1>

<h2>View Controller Essentials</h2>

<ul>
<li>An instance of a subclass of <strong>UIViewController</strong></li>
<li>It manages a <strong>view hierarchy</strong></li>
<li>It&rsquo;s responsible for creating view objects, handling events</li>
</ul>


<!--more-->


<h2>View in View Controller</h2>

<ul>
<li>An important property <strong>view</strong></li>
<li>It&rsquo;s the <strong>root</strong> of view controller&rsquo;s view hierarchy</li>
<li>Two ways of creating its view hierarchy :

<ul>
<li>Programmatically, override the <strong>UIViewController</strong> method <strong>loadView</strong></li>
<li>Interface Builder, loading a NIB file</li>
</ul>
</li>
</ul>


<h3>Create view programmatically</h3>

<p>In your own view controller class(which can be created by inheriting <strong>UIViewController</strong>), override the <strong>loadview</strong>:</p>

<pre><code class="objective-c create view in view controller's loadView method ">- (void)loadView
{
    // 1. specify the view's frame
    // could use other Rect like full screen
    // [UIScreen mainScreen].bounds
    CGRect firstFrame = CGRectMake(160, 200, 100, 105);

    // 2. init an instance of view
    YourOwnView *firstView = [[YourOwnView alloc] initWithFrame:firstFrame];

    // 3. configure the  view
    firstView.backgroundColor = [UIColor greenColor];

    // 4. set the view in view controller to this view
    // sometimes you use addSubView if you have multiple views
    // e.g. [firstView addSubview: secondView];
    self.view = firstView;
}
</code></pre>

<p>However, the code above is for creating view hierarchy in view controller only,
it has nothing to do with the actual view appeared on the screen. To connect a
view in view controller with screen, you need to use <strong>UIwindow</strong>&rsquo;s <strong>setRootViewController</strong>.</p>

<pre><code class="objective-c set root view controller in appDelegate.m ">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];

    // init your view controller
    YourOwnViewController *vc = [YourOwnViewController alloc] init];

    // set the window's root controller
    self.window.rootViewController = vc;

    self.window.backgroundColor = [UIColor whiteColor];
    [self.window makeKeyAndVisible];
    return YES;
}
</code></pre>

<h3>Create view use XIB</h3>

<ul>
<li>Steps for creating view for view controller using XIB:

<ul>
<li>create a view using interface builder(i.e. create xib file)</li>
<li>create your view controller for this xib</li>
<li><strong>make sure your xib&rsquo;s name is named the same as your view controller</strong> (xcode uses this to automatically load nib file i.e. init the view)</li>
<li><strong>connect</strong> your controller to your xib(e.g. File&rsquo;s owner, IBOutlet, IBAction)</li>
</ul>
</li>
</ul>


<pre><code class="objective-c create view controller according to your xib file ">@interface YourOwnViewController ()

// IBOutlet is typedef as void, it's only for xcode to identify the specific element in xib
// Pay attention to the weak decorator, follow parent-child rule
@property (nonatomic, weak) IBOutlet UIDatePicker *datePicker;

@end

// IBAction is typedef as void, it's only for xcode to identify the specific action in xib
- (IBAction)addReminder:(id)sender
{
    NSDate *date = self.datePicker.date;
    NSLog(@"Setting a reminder for %@", date);
}
</code></pre>

<p>After you get your xib and view controller done, you may now <strong>connect these two together</strong>.</p>

<ul>
<li>Connect to File&rsquo;s Owner in xib

<ul>
<li>use identity inspector to change the view controller class to your own class</li>
</ul>
</li>
<li>Connect outlet and actions

<ul>
<li>right click on File&rsquo;s Owner, drag-and-drop those connections between your controller and xib</li>
</ul>
</li>
</ul>


<h2><br></h2>

<h2>UIViewController Initializer</h2>

<ul>
<li>Designated Initializer: <strong>initWithName:bundle:</strong></li>
<li>Simply call <strong>alloc</strong> and <strong>init</strong></li>
<li>Sending <strong>init</strong> to a view controller calls <strong>initWithName:bundle:</strong> and passes <em>nil</em> for both arguments</li>
<li><strong>When a view controller is initialized with <em>nil</em> as its NIB name, it searches for a NIB file with the name of the class</strong></li>
</ul>


<h2><br></h2>

<h2>UIViewController Lifecycle</h2>

<p>See previous post for more details: <a href="http://pigfly.github.io/blog/2014/09/01/road-to-ios-0-dot-2/">View Controller Lifecycle</a></p>

<h2><br></h2>

<h3>Reference</h3>

<ol>
<li>Stanford iOS 7 development</li>
<li><a href="https://developer.apple.com/library/mac/navigation/">Mac Developer Library</a></li>
<li><a href="http://www.bignerdranch.com/">Big Nerd Ranch</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[road to iOS 0.6]]></title>
    <link href="http://pigfly.github.io/blog/2014/10/road-to-ios-0-dot-6/"/>
    <updated>2014-10-07T05:14:19+11:00</updated>
    <id>http://pigfly.github.io/blog/2014/10/road-to-ios-0-dot-6</id>
    <content type="html"><![CDATA[<h1>Views</h1>

<h2>View Essentials</h2>

<ul>
<li>View is an instance of <strong>UIView</strong> or one of its subclass (e.g. UIScrollView UILabel&hellip;)</li>
<li>View knows how to <strong>draw</strong> itself (e.g. drawInRect)</li>
<li>View handles <strong>events</strong> (e.g. touches, value changes)</li>
<li>View exists within a <strong>hierarchy</strong> of views. (root view is app&rsquo;s window)</li>
</ul>


<!--more-->


<h2>View Hierarchy</h2>

<ul>
<li>Each view in the hierarchy, renders itself to its <em>layer</em>, an instance of <strong>CALayer</strong></li>
<li>The layers of all the views are composited together to form a complete view</li>
<li>When you add a view as subview of another view, the <strong>superview</strong> and <strong>subviews</strong>  properties are automatically established</li>
<li>Classes like <strong>UIButton</strong>, <strong>UILabel</strong> already know how to draw themselves to their layers</li>
</ul>


<p><img src="/images/ios/view_hierarchy_2.png" width="267" height="380" title="view hierarchy diagram" ></p>

<p><a href="http://photosynthesiis.github.io/blog/2014/03/09/ios-4/">image source</a></p>

<h2><br></h2>

<h2>What a View Class looks like</h2>

<ul>
<li>You create your own view class inherent from <strong>UIView</strong></li>
<li><strong>initWithFrame:</strong> is designated initializer</li>
<li><strong>drawRect:</strong> is for custom drawing</li>
</ul>


<pre><code class="objective-c what a view class looks like ">// designated initializer
- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        // do init setup for your view

    }
    return self;
}

// Only override drawRect: if you perform custom drawing.
- (void)drawRect:(CGRect)rect
{
    ...
}
</code></pre>

<h2>Create a View</h2>

<ul>
<li>To create a view, you need to get its <strong>frame</strong></li>
<li>A <strong>frame</strong> specifies the view&rsquo;s size and its position relative to its superview, and it&rsquo;s always in a <strong>rectangle</strong> model.</li>
<li>Steps for creating a view :

<ul>
<li>Specify the view&rsquo;s frame</li>
<li>Init an instance of view</li>
<li>configure the view instance</li>
<li>add view instance as subview</li>
</ul>
</li>
</ul>


<pre><code class="objective-c create view in view controller's loadView method ">- (void)loadView
{
    // 1. specify the view's frame
    // could use other Rect like full screen
    // [UIScreen mainScreen].bounds
    CGRect firstFrame = CGRectMake(160, 200, 100, 105);

    // 2. init an instance of view
    YourOwnView *firstView = [[YourOwnView alloc] initWithFrame:firstFrame];

    // 3. configure the  view
    firstView.backgroundColor = [UIColor greenColor];

    // 4. set the view in view controller to this view
    // sometimes you use addSubView if you have multiple views
    // e.g. [firstView addSubview: secondView];
    self.view = firstView;
}
</code></pre>

<h2><br></h2>

<h2>Custom Drawing in drawRect:</h2>

<ul>
<li><strong>UIView</strong> subclasses override <strong>drawRect:</strong> to perform custom drawing. e.g. the <strong>drawRect:</strong> for <strong>UILabel</strong> draw text on screen</li>
<li>To override <strong>drawRect</strong>, you need to get the <strong>bounds</strong>

<ul>
<li><strong>bounds</strong> is a view&rsquo;s rectangle in its <strong>own</strong> coordinate system</li>
<li><strong>frame</strong> is the same rectangle in its <strong>superview&rsquo;s</strong> coordinate system</li>
</ul>
</li>
<li>Steps for creating a custom view in drawRect:

<ul>
<li>Specify the bounds of view</li>
<li>Specify necessary geometry variables for building <strong>UIBezierPath</strong></li>
<li>Init an instace of <strong>UIBezierPath</strong></li>
<li>Call appropriate drawing API in <strong>UIBezierPath</strong></li>
<li>Draw the line</li>
</ul>
</li>
</ul>


<pre><code class="objective-c create custom drawing in drawRect: ">- (void)loadView
{
    // 1. Specify the bounds of view
    CGRect bounds = self.bounds;

    // 2. Specify necessary geometry variables for building UIBezierPath
    CGPoint center;
    center.x = bounds.origin.x + bounds.size.width / 2.0;
    center.y = bounds.origin.y + bounds.size.height / 2.0;

    // The largest circle will circumstribe the view
    float maxRadius = hypot(bounds.size.width, bounds.size.height) / 2.0;

    // 3. Init an instace of UIBezierPath
    UIBezierPath *path = [[UIBezierPath alloc] init];

    // 4. Call appropriate drawing API in UIBezierPath
    [path addArcWithCenter:center
                    radius:maxRadius
                startAngle:0.0
                  endAngle:M_PI * 2.0
                 clockwise:YES];


    // Configure the drawing color to light gray
    [[UIColor lightGrayColor] setStroke];

    // 5. Draw the line!
    [path stroke];
}
</code></pre>

<h2><br></h2>

<h2>Event Handler &amp; Redrawing</h2>

<ul>
<li>When user touches a view, the view is sent the message <strong>touchesBegan:withEvent:</strong></li>
<li>It&rsquo;s a view&rsquo;s event handler in the <strong>run loop</strong></li>
</ul>


<p><blockquote><p>When an app is launched, it starts a run loop, or run lifecycle. Its job is to listen for events, such as touch. When an event occurs, it finds the appropriate handler methods for event. Once finished, control returns to the run loop.</p><footer><strong>@developer.BNR</strong></footer></blockquote></p>

<ul>
<li>When <strong>run loop</strong> regains control, it checks a list of &ldquo;dirty views&rdquo; - views that need to be re-rendered</li>
<li>Then <strong>run loop</strong> then sends the <strong>drawRect:</strong> message to those &ldquo;dirty views&rdquo;</li>
<li>To get a view on the re-rendered lists, you <strong>must</strong> send view the message <strong>setNeedDisplay</strong></li>
</ul>


<pre><code class="objective-c implement event handler when touch begins in vew ">// When a finger touches the screen
- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
    // Get 3 random numbers between 0 and 1
    float red = (arc4random() % 100) / 100.0;
    float green = (arc4random() % 100) / 100.0;
    float blue = (arc4random() % 100) / 100.0;

    UIColor *randomColor = [UIColor colorWithRed:red
                                           green:green
                                            blue:blue
                                           alpha:1.0];

    self.circleColor = randomColor;
}
</code></pre>

<pre><code class="objective-c send view setNeedsDisplay message in accessor ">- (void)setCircleColor:(UIColor *)circleColor
{
    self.circleColor = circleColor;

    // send the view message to re-render
    [self setNeedsDisplay];
}
</code></pre>

<h2><br></h2>

<h3>Reference</h3>

<ol>
<li>Stanford iOS 7 development</li>
<li><a href="https://developer.apple.com/library/mac/navigation/">Mac Developer Library</a></li>
<li><a href="http://www.bignerdranch.com/">Big Nerd Ranch</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[road to iOS 0.5]]></title>
    <link href="http://pigfly.github.io/blog/2014/09/road-to-ios-0-dot-5/"/>
    <updated>2014-09-26T01:14:19+10:00</updated>
    <id>http://pigfly.github.io/blog/2014/09/road-to-ios-0-dot-5</id>
    <content type="html"><![CDATA[<h2>Interface builder, Connections, Initializers</h2>

<h3>Interface builder</h3>

<ul>
<li><strong>StoryBoard</strong>

<ul>
<li>easy way, less flexible, hard to do programmatically</li>
</ul>
</li>
<li><strong>XIB</strong>

<ul>
<li>create a view only, easy to do programmatically</li>
</ul>
</li>
</ul>


<!--more-->


<h4>What is XIB</h4>

<ul>
<li>XIB stands for XML Interface Builder</li>
<li><strong>Object editor</strong>, you create and configure objects like buttons and controllers, save them into archive called XIB</li>
</ul>


<h4>What is NIB</h4>

<ul>
<li>When you build app, the XIB file is compiled into NIB file for efficiency</li>
<li>Then NIB file is copied into app&rsquo;s <em>bundle</em></li>
<li><strong>Bundle</strong>, a directory contains app&rsquo;s executable and any resources</li>
</ul>


<h2><br></h2>

<h3>Connections</h3>

<ul>
<li>Let one object know where another object is in memory, so that two objects can <strong>communicate</strong></li>
<li>More precisely,  often between controller and view communication

<ul>
<li><strong>outlets</strong>, as property, no need to know who is sender</li>
<li><strong>actions</strong>, as implementation, sometimes needed to know who is sender, so that you can perform desired action</li>
</ul>
</li>
</ul>


<h4>Connect your controller to appDelegate</h4>

<ul>
<li>To get your interface on screen, you have to connect your view controller to app&rsquo;s controller: <strong>appDelegate</strong></li>
<li>That means, you need to make your controller as <em>root controller</em> of this window.</li>
<li><strong>appDelegate</strong>, manages a single top-level <strong>UIWindow</strong> for the application.</li>
</ul>


<pre><code class="objective-c make your controller as root controller ">- (BOOL)application:(UIApplication *)application 
didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
        // init window
        ....

        // init your controller, set as root
        YourViewController *vc = [[YourViewController alloc] init];
        self.window.rootViewController = vc;

        return YES;
}
</code></pre>

<h2><br></h2>

<h3>Initializers</h3>

<ul>
<li>begins with word <strong>init</strong>, name convention only</li>
<li><strong>designated initializer</strong>,  no matter how many init methods are,  one method is chosen as
designated, it makes sure that every instance variable of an object is valid.</li>
</ul>


<pre><code class="objective-c pattern for designated init">- (instancetype)initWithxxx:(yyy)zzz
                 xxx:(yyy)zzz...
{
    self = [super init];

    if (self)
    {
        ...
    }

    return self;
}
</code></pre>

<h4>Controller Initializer</h4>

<p>When an instance of controller is created, it is sent the message <strong>initWithNibName:bundle</strong></p>

<pre><code class="objective-c controller init">- (instancetype)initWithNibName:(NSString *)nibNameOrNil
                bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];

    if (self) 
    {
        ....
    }

    return self;
}
</code></pre>

<h4>Instancetype</h4>

<ul>
<li>Why not return specific type ?  all about polymorphism</li>
<li>Deal with the problem if the class was subclassed but sending this init message to subclass :(</li>
<li>Return the type of the caller</li>
</ul>


<h2><br></h2>

<h3>Reference</h3>

<ol>
<li>Stanford iOS 7 development</li>
<li><a href="https://developer.apple.com/library/mac/navigation/">Mac Developer Library</a></li>
<li><a href="http://www.bignerdranch.com/">Big Nerd Ranch</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
